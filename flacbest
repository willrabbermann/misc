#!/bin/bash
# Re-encodes .flac files to '--best' compression for smaller size,
# skipping files already tagged at that level.

MAX_THREADS=4

cleanup_and_exit() {
    if [[ -f "$TMP_FILE" ]]; then
        rm -f "$TMP_FILE"
    fi
    exit 1
}

get_threads() {
    local INSTALLED_VERSION=$(flac --version 2>/dev/null | head -n 1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' )
    local REQUIRED_VERSION="1.5.0"
    if [ -n "$INSTALLED_VERSION" ]; then
        if [ "$(printf "%s\n%s" "$REQUIRED_VERSION" "$INSTALLED_VERSION" \
            | sort -V | tail -n 1)" == "$INSTALLED_VERSION" ]; then
            if command -v nproc &> /dev/null; then
                CPU_THREADS=$(nproc)
            else
                CPU_THREADS=$(grep -c '^processor' /proc/cpuinfo 2>/dev/null)
            fi
            [[ -z "$CPU_THREADS" || "$CPU_THREADS" -eq 0 ]] && CPU_THREADS=1
            if [ "$CPU_THREADS" -ge "$MAX_THREADS" ]; then
                CPU_THREADS=$MAX_THREADS
            fi
            TJ="--threads=$CPU_THREADS"
        fi
    fi
}

set_tag() {
     metaflac --remove-tag="FLAC CL" --set-tag="FLAC CL=$best_level" "$file"
}

if ! command -v flac &> /dev/null
then
    echo "Error: The 'flac' command could not be found."
    echo "Please install the FLAC utilities package (often named 'flac' or 'flac-tools') to run this script."
    exit 1
fi

flac_files=()
while IFS= read -r file_path; do
    flac_files+=("$file_path")
done < <(find . -type f -name "*.flac" | sort -V)

echo "Found ${#flac_files[@]} .flac files."

trap cleanup_and_exit INT TERM EXIT
best_level="$(flac --help | grep 'best' | sed -E 's/.*-([0-9]+).*/\1/')"
get_threads

for file in "${flac_files[@]}"; do
    TMP_FILE="$file.tmp"

    tag_output=$(metaflac --show-tag="FLAC CL" "$file")
    tag_value=$(echo "$tag_output" | sed -nE 's/^FLAC CL=([0-9]+)$/\1/p')

    echo "Processing: $file"

    if [[ "$tag_value" == "$best_level" ]]; then
        echo "  -> Skipped. File already tagged as compression level $best_level."
        continue
    fi

    flac --best -f -s $TJ \
         "$file" -o "$TMP_FILE"
         
	[[ $? -ne 0 ]] && exit $?

    if [[ -f "$TMP_FILE" ]]; then
        original_size=$(stat -c%s "$file")
        new_size=$(stat -c%s "$TMP_FILE")

        if (( new_size < original_size )); then
            echo "  -> Recompressed to level $best_level: Saved $(bc <<< "scale=2; ($original_size - $new_size) / 1048576") MiB."
            mv -f "$TMP_FILE" "$file"
        else
            echo "  -> File is already compressed to level $best_level."
            rm -f "$TMP_FILE"

        fi
        set_tag
    else
        echo "  -> Error re-encoding $file. Skipping."
        rm -f "$TMP_FILE" 2>/dev/null
    fi
done
